local version = "0.0.5"
sliders_gravity = -9.81

local min_speed_jitter = 0.05
local MAXIMUM_CART_SPEED = 7.5


local pushable_block_modpath = minetest.get_modpath("pushable_block")

dofile (pushable_block_modpath .. "/generic_functions.lua")
dofile (pushable_block_modpath .. "/physics.lua")
dofile (pushable_block_modpath .. "/slider.lua")
dofile (pushable_block_modpath .. "/player_interaction.lua")
dofile (pushable_block_modpath .. "/generic_functions.lua")
dofile (pushable_block_modpath .. "/workarounds.lua")
dofile (pushable_block_modpath .. "/model.lua")

function fix_speed_above_sliders(entity)

	local ownpos = entity.object:getpos()


	local slidertype =  detect_slider_type(ownpos)

	if slidertype == "inv" or
	   slidertype == "in_air" then
		entity.moving_up = false
		if entity.last_known_good_pos ~= nil then
			if not end_of_track(ownpos,entity.last_known_good_pos) then
				entity.object:moveto(entity.last_known_good_pos)
				ownpos = entity.last_known_good_pos
			else
				return
			end
		else
			return
		end
	else

		entity.last_known_good_pos = ownpos
	end

	local current_speed = entity.object:getvelocity()
	
	--print("slidertype: " .. slidertype .. " velocity: " .. printpos(current_speed) .. " pos: " .. printpos(ownpos))
	
	--link to straight slider
	if slidertype == "x" then
		ownpos.z = math.floor(ownpos.z + 0.5)
		ownpos.y = math.floor(ownpos.y + 0.5)
		current_speed.z = 0	
	end

	if slidertype == "z" then
		ownpos.x = math.floor(ownpos.x + 0.5)
		ownpos.y = math.floor(ownpos.y + 0.5)
		current_speed.x = 0
	end

	--required for some normal calculations
	local zpos_rounded = math.floor(ownpos.z + 0.5)
	local xpos_rounded = math.floor(ownpos.x + 0.5)


	if 	slidertype == "x-u" or
		slidertype == "x+u" or 
		slidertype == "z-u" or
		slidertype == "z+u" or
		slidertype == "x-b" or
		slidertype == "x+b" or 
		slidertype == "z-b" or
		slidertype == "z+b" then
		
		entity.moving_up = true
		--print("Moving up: " .. slidertype)
	else
		---print("NOT Moving up: " .. slidertype)
		entity.moving_up = false
	end


	local toinc_y = 0
	
	fix_collision_on_move_up(current_speed,entity,slidertype)
	--print("current_speed: " .. printpos(current_speed))
	
	--moving from x direction up/down
	if (slidertype == "x-u" and ownpos.x >= xpos_rounded) or
		(slidertype == "x+u" and ownpos.x <= xpos_rounded) then
		toinc_y = 1 - math.abs((xpos_rounded - ownpos.x) *2)
	end

	if (slidertype == "x-b" and ownpos.x >= xpos_rounded) or
		(slidertype == "x+b" and ownpos.x <= xpos_rounded) then	
		toinc_y = 1 - math.abs((ownpos.x - xpos_rounded) *2)
		toinc_y = toinc_y + fix_on_step_move_up_jitter(slidertype,current_speed,ownpos,xpos_rounded,zpos_rounded)
        --print("adding offset: " .. toinc_y)
	end

	--moving z direction up/down
	if (slidertype == "z-u" and ownpos.z >= zpos_rounded) or
		(slidertype == "z+u" and ownpos.z <= zpos_rounded) then
		toinc_y = 1 - math.abs((zpos_rounded - ownpos.z) *2)
	end

	if (slidertype == "z-b" and ownpos.z >= zpos_rounded) or
		(slidertype == "z+b" and ownpos.z <= zpos_rounded) then	
		toinc_y = 1 - math.abs((ownpos.z - zpos_rounded) *2)
		toinc_y = toinc_y + fix_on_step_move_up_jitter(slidertype,current_speed,ownpos,xpos_rounded,zpos_rounded)
        --print("adding offset: " .. toinc_y)
	end

	--really increase y value
	if (toinc_y > 0) then
		if toinc_y > 1.5 then
			toinc_y = 1.5
		end
		local ground_level = get_ground_level(ownpos)
		--print("Ground level: " .. dump(ground_level))
		ownpos.y = ground_level.y + toinc_y
	end

	if slidertype == "x+" then

		if ownpos.z  >= zpos_rounded and
			current_speed.z > 0 then
			
			--print("dir change z+ -> x+")
		
			current_speed.x = math.abs(current_speed.z)
			current_speed.z = 0
		
			ownpos.z = math.floor(ownpos.z + 0.5)
		
            if entity.linkedplayer ~= nil then
                    local current_yaw = entity.linkedplayer:getyaw()
                    if current_yaw ~= nil then
	                    current_yaw = current_yaw - (3.14/4)
	                    entity.linkedplayer:setyaw(current_yaw)
	                else 
	                   --print("unable to get player yaw")
                    end
            end
		else
			if ownpos.x <= xpos_rounded and
			current_speed.x < 0 then
				--print("dir change x- -> z-")

				current_speed.z = - math.abs(current_speed.x)
				current_speed.x = 0
				
	
				ownpos.x = math.floor(ownpos.x + 0.5)
			if entity.linkedplayer ~= nil then
                    local current_yaw = entity.linkedplayer:getyaw()
                    if current_yaw ~= nil then
	                    current_yaw = current_yaw + (3.14/4)
	                    entity.linkedplayer:setyaw(current_yaw)
	                else 
                       --print("unable to get player yaw")
	                end
            end
			end
		end
	end

	if slidertype == "x-" then
		if ownpos.z >= zpos_rounded and
			current_speed.z > 0 then

			--print("dir change z+ ->  x-")
		
			current_speed.x = - math.abs(current_speed.z)
			current_speed.z = 0
		
			ownpos.z = math.floor(ownpos.z + 0.5)
			if entity.linkedplayer ~= nil then
                    local current_yaw = entity.linkedplayer:getyaw()
                    if current_yaw ~= nil then
	                    current_yaw = current_yaw - (3.14/4)
	                    entity.linkedplayer:setyaw(current_yaw)
                    else 
                       --print("unable to get player yaw")
	                end
			end
		else
			if ownpos.x >= xpos_rounded and
				current_speed.x > 0 then

				--print("dir change x+ -> z-")
		
				current_speed.z = - math.abs(current_speed.x)
				current_speed.x = 0 
				
		
				ownpos.x = math.floor(ownpos.x + 0.5)
				
				if entity.linkedplayer ~= nil then
                    local current_yaw = entity.linkedplayer:getyaw()
                    if current_yaw ~= nil then
	                    current_yaw = current_yaw + (3.14/4)
	                    entity.linkedplayer:setyaw(current_yaw)
                    else 
                       --print("unable to get player yaw")
                    end
                end
			end
		end
	end


	if slidertype == "z+" then
		if ownpos.x <= xpos_rounded and
			current_speed.x < 0 then

			--print("dir change x- -> z+")
		
			current_speed.z = math.abs(current_speed.x)
			current_speed.x = 0
		
			ownpos.x = math.floor(ownpos.x + 0.5)
		else
			if ownpos.z <= zpos_rounded and
				current_speed.z < 0 then

				--print("dir change z- -> x-")
		
				current_speed.x = math.abs(current_speed.z)
				current_speed.z = 0
				
		
				ownpos.x = math.floor(ownpos.x + 0.5)
			end
		end
	end


	if slidertype == "z-" then
		if ownpos.x >= xpos_rounded and
			current_speed.x > 0 then

			--print("dir change x+ -> z+")
		
			current_speed.z = math.abs(current_speed.x)
			current_speed.x = 0
		
			ownpos.x = math.floor(ownpos.x + 0.5)
		else

			if ownpos.z <= zpos_rounded and
				current_speed.z < 0 then

				--print("dir change z- -> x-")
		
				current_speed.x = - math.abs(current_speed.z)
				current_speed.z = 0 
				
		
				ownpos.z = math.floor(ownpos.z + 0.5)
			end
		end
	end

	entity.object:moveto(ownpos)
	entity.object:setvelocity(current_speed)
	
	entity.last_speed = current_speed

	return slidertype
end

minetest.register_entity(":pushable_block:moveblock_ent",
		 {
		     physical = true,
		     collisionbox = {-0.5,-0.5,-0.5, 0.5,0.5,0.5},
             visual = "wielditem",
             textures        = { "pushable_block:box_cart" },
             visual_size     = {x=0.66,y=0.66,z=0.66},
		     on_step = function(self, dtime)
					
					local slidertype = fix_speed_above_sliders(self)

					local current_velocity = self.object:getvelocity()
					local current_acceleration = self.object:getacceleration()
					local speed_fix = false

					local gravity 		= calc_gravity(slidertype)


					--don't do anything if block ain't moving
					if current_velocity.z == 0 and
						current_velocity.x == 0 and
						current_acceleration.x == 0 and
						current_acceleration.z == 0 and
						gravity.x == 0 and
						gravity.z == 0 then
						return
					end

					

					--make block stop on beeing to slow
					if math.abs(current_velocity.x) < min_speed_jitter
						then
						current_velocity.x = 0
						speed_fix = true
					end
		
					if math.abs(current_velocity.z) < min_speed_jitter then
						current_velocity.z = 0
						speed_fix = true
					end 

					if speed_fix then
						self.object:setvelocity(current_velocity)
						--print("Fixing speed below threshold")	
					end
			
					if current_velocity.z == 0 and
						current_velocity.x == 0 and
						gravity.x == 0 and
						gravity.z == 0 then

						self.object:setacceleration({x=0,y=current_velocity.y,z=0})	
	
						--print("Block to slow stopping")	
						return
					end
						

					--print("current velocity:" .. printpos(current_velocity))


					--calculate acceleration modifiers
					local resistance 	= calc_resistance(current_velocity)
					local current_friction 	= calc_friction(current_velocity,self.object:getpos())
					
					local boost = get_boost(current_velocity,self.object:getpos())


					local new_accel = {x=0,y=sliders_gravity,z=0}

					new_accel.x = resistance.x + current_friction.x + gravity.x + boost.x
					new_accel.z = resistance.z + current_friction.z + gravity.z + boost.z
					
					--enforce maximum speed
					if  current_velocity.x > MAXIMUM_CART_SPEED and
					   new_accel.x > 0 then
					       new_accel.x = 0
					end
					
					if  current_velocity.x < -MAXIMUM_CART_SPEED and
                       new_accel.x < 0 then
                           new_accel.x = 0
                    end
                    
                    if  current_velocity.z > MAXIMUM_CART_SPEED and
                       new_accel.z > 0 then
                           new_accel.z = 0
                    end
                    
                    if  current_velocity.z < -MAXIMUM_CART_SPEED and
                       new_accel.z < 0 then
                           new_accel.z = 0
                    end


					if self.moving_up then
						--print("moving up no y acceleration")
						new_accel.y = 0
					end

					--print("setting accel:" .. printpos(new_accel))
					--print("setting z-accel: " .. resistance.z .. ",".. current_friction.z .. "," ..gravity.z .. "," .. boost.z)
					--print("setting x-accel: " .. resistance.x .. ",".. current_friction.x .. "," ..gravity.x .. "," .. boost.x)

					self.object:setacceleration(new_accel)

					if self.linkedplayer ~= nil then
						local pos = self.object:getpos()
						self.linkedplayer:setpos({x=pos.x,y=pos.y,z=pos.z})
						--self.linkedplayer:setpos(pos)
						self.linkedplayer:setvelocity(current_velocity)
						self.linkedplayer:setacceleration(new_accel)
					end			 	
					end,
		      on_punch = function(self, hitter)

					local own_pos = self.object:getpos()
					local hitterpos = hitter:getpos()
					
					local distance = pushable_block_calc_distance(own_pos,hitterpos)
					
					if (distance > 1.5) and
					    self.linkedplayer == nil then
                        --  print("linking player")
                        self.linkedplayer = hitter
                        self.linkedplayer:setpos(own_pos)
					else
					    if self.linkedplayer ~= nil then
					       self.linkedplayer = nil
					    else
							local current_velocity = self.object:getvelocity()
							local speed_change = calc_accel_on_sliders(own_pos,hitter:getpos(hitter))
		
							local cleant_pos = round_pos(own_pos)
		
							if speed_change.z == 0 then
								self.object:moveto(cleant_pos)
								current_velocity.z = 0
								current_velocity.x = current_velocity.x + speed_change.x
							end
		
							if speed_change.x == 0 then
								self.object:moveto(cleant_pos)
								current_velocity.x = 0
								current_velocity.z = current_velocity.z + speed_change.z
							end
		
		
							--print("setting speed by punch: x="..current_velocity.x .. " z="..current_velocity.z .. " dir=".. speed_change.dir)	
							
							if speed_change.dir == "inv" or
							   speed_change.dir == "in_air" then
								 current_velocity = {x = current_velocity.x + speed_change.x, y= current_velocity.y, z = current_velocity.z + speed_change.z}
							end
		
							self.object:setvelocity(current_velocity)
						end
						end
					end,


			on_activate = function(self,staticdata)
				self.object:setacceleration({x=0,y=sliders_gravity,z=0})
				self.last_speed = self.object:getvelocity()
				--self.object:remove()
			end,

			on_rightclick = function(self,clicker)
				--print("Info: "..detect_slider_type(self.object:getpos()).. " :",self.moving_up)
				clicker:get_inventory():add_item("main", "pushable_block:moveblock")
				self.object:remove()
			end,

			moving_up = false,
			linkedplayer = nil,
		 })

	minetest.register_craftitem("pushable_block:moveblock", {
		image = "pushable_block_cart.png",

		on_place = function(item, placer, pointed_thing)
			if pointed_thing.type == "node" then
				local pos = pointed_thing.above
				minetest.env:add_entity(pos,"pushable_block:moveblock_ent")
				item:take_item()
			end
			return item
		end
	})

	minetest.register_craft({
		output = 'craft "pushable_block:moveblock" 1',
		recipe = {
			{"default:cobble"},
			{"default:cobble"},
		}
	})

	minetest.register_craft({
	output = 'node "pushable_block:slider" 20',
	recipe = {
		{"default:cobble", "default:sand","default:cobble"},
		{"default:sand", "default:cobble", "default:sand"},
		{"default:cobble", "default:sand","default:cobble"},
	}
	})


	minetest.register_craft({
	output = 'node "pushable_block:booster" 10',
	recipe = {
		{"default:cobble","default:sand","default:cobble"},
		{"default:sand", "default:glass", "default:sand"},
		{"default:cobble", "default:sand","default:cobble"},
	}
	})
	
   minetest.register_craft({
    output = 'node "pushable_block:booster" 10',
    recipe = {
        {"default:cobble","default:sand","default:cobble"},
        {"default:sand", "default:dirt", "default:sand"},
        {"default:cobble", "default:sand","default:cobble"},
    }
    })

	minetest.register_node("pushable_block:slider", {
	Description = "Slider",
	drawtype = "raillike",
	tile_images = {"pushable_block_monorail.png", 
	               "pushable_block_monorail_curved.png", 
	               "pushable_block_monorail_t_junction.png", 
	               "pushable_block_monorail_crossing.png"},
	inventory_image = "pushable_block_monorail.png",
	wield_image = "pushable_block_monorail.png",
	paramtype = "light",
	is_ground_content = true,
	walkable = false,
	selection_box = {
		type = "fixed",
		fixed = {-1/2, -1/2, -1/2, 1/2, -1/2+1/16, 1/2},
	},
	groups = {bendy=2,snappy=1,dig_immediate=2},
	})

	minetest.register_node("pushable_block:booster", {
	Description = "Booster",
	drawtype = "raillike",
	tile_images = {"pushable_block_monorail_boost.png", 
                   "pushable_block_monorail_curved_boost.png", 
                   "pushable_block_monorail_t_junction_boost.png", 
                   "pushable_block_monorail_crossing_boost.png"},
    inventory_image = "pushable_block_monorail_boost.png",
	wield_image = "pushable_block_monorail_boost.png",
	paramtype = "light",
	is_ground_content = true,
	walkable = false,
	selection_box = {
		type = "fixed",
		fixed = {-1/2, -1/2, -1/2, 1/2, -1/2+1/16, 1/2},
	},
	groups = {bendy=2,snappy=1,dig_immediate=2},
	})
	
	
	minetest.register_node("pushable_block:break", {
    Description = "Booster",
    drawtype = "raillike",
    tile_images = {"pushable_block_monorail_break.png", 
                   "pushable_block_monorail_curved_break.png", 
                   "pushable_block_monorail_t_junction_break.png", 
                   "pushable_block_monorail_crossing_break.png"},
    inventory_image = "pushable_block_monorail_break.png",
    wield_image = "pushable_block_monorail_break.png",
    paramtype = "light",
    is_ground_content = true,
    walkable = false,
    selection_box = {
        type = "fixed",
        fixed = {-1/2, -1/2, -1/2, 1/2, -1/2+1/16, 1/2},
    },
    groups = {bendy=2,snappy=1,dig_immediate=2},
    })


print("pushable block " .. version .. " mod loaded")
